generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// ----------------------------
// Enums
// ----------------------------
enum Role {
  USER
  MERCHANT
}

enum OrderStatus {
  PENDING
  PACKED
  DELIVERED
  CANCELLED
}

// ----------------------------
// Core Auth (NextAuth adapter)
// Keep as-is for speed; works with Email/OAuth
// ----------------------------

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  // If you also support credentials for quick demo:
  hashedPassword String  // optional; use only if you do creds provider
  role          Role      @default(USER)

  // Profile / convenience
  phone         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  stores        Store[]        // if role = MERCHANT
  addresses     Address[]
  cart          Cart?
  orders        Order[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ----------------------------
// Merchant/Store & Location
// ----------------------------
model Store {
  id        String   @id @default(cuid())
  merchant  User     @relation(fields: [merchantId], references: [id], onDelete: Cascade)
  merchantId String

  name      String
  description String?
  phone     String?
  storeImage String?

  // Minimal location (good enough for filters)
  addressLine1 String
  addressLine2 String?
  city         String
  state        String?
  country      String  @default("India")
  pincode      String
  lat          Float?  // optional, can fill later
  lng          Float?  // optional, can fill later

  products  Product[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([city])
  @@index([pincode])
}

// ----------------------------
// Category (supports unlimited subcategories)
// Use parentId for hierarchy. Top-level (Fashion/Electronics/Home Essentials)
// are parent categories; subcategories have parentId set.
// ----------------------------
model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")

  // Products can point to category and optional subcategory
  products  Product[]  @relation("CategoryProducts")
  subcategoryProducts Product[] @relation("SubcategoryProducts")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// ----------------------------
// Product
// ----------------------------
model Product {
  id           String    @id @default(cuid())
  store        Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId      String

  name         String
  slug         String    @unique
  description  String?
  price        Int       // store in paise for consistency
  stock        Int       @default(0)
  isActive     Boolean   @default(true)

  // Category & optional subcategory (both Category model)
  category     Category  @relation("CategoryProducts", fields: [categoryId], references: [id])
  categoryId   String
  subcategory  Category? @relation("SubcategoryProducts", fields: [subcategoryId], references: [id])
  subcategoryId String?

  // denormalized hints for simple queries (optional; handy for 4-hr build)
  categoryName   String
  subcategoryName String?

  images       ProductImage[]
  orderItems   OrderItem[]
  cartItems    CartItem[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([categoryId])
  @@index([subcategoryId])
  @@index([price])
  @@index([storeId])
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  url       String
  alt       String?

  createdAt DateTime @default(now())
}

// ----------------------------
// Cart & Basic Checkout (no payment gateway)
// ----------------------------
model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String     @unique
  items     CartItem[]

  updatedAt DateTime   @updatedAt
  createdAt DateTime   @default(now())
}

model CartItem {
  id         String   @id @default(cuid())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     String

  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  quantity   Int      @default(1)
  // snapshot price when added (protects against later price changes)
  unitPriceAtAdd Int

  createdAt  DateTime @default(now())

  @@unique([cartId, productId]) // one line item per product
}

// ----------------------------
// Address (delivery)
// ----------------------------
model Address {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  label       String?  // e.g., "Home", "Office"
  line1       String
  line2       String?
  city        String
  state       String?
  country     String   @default("India")
  pincode     String
  lat         Float?
  lng         Float?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ordersShipping  Order[]
}

// ----------------------------
// Orders (simple status flow)
// ----------------------------
model Order {
  id         String      @id @default(cuid())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  store      Store       @relation(fields: [storeId], references: [id])
  storeId    String

  shippingAddress Address @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String

  status     OrderStatus @default(PENDING)
  items      OrderItem[]
  totalAmount Int        // computed sum of items

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
  @@index([storeId])
  @@index([status])
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId    String

  product    Product  @relation(fields: [productId], references: [id])
  productId  String

  quantity   Int
  unitPrice  Int      // snapshot of product.price at purchase time

  // Optional snapshots to simplify UI without extra joins
  productName String
  imageUrl    String?

  @@index([productId])
}
